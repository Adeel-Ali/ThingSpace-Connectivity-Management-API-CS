/*
 * ThingSpaceConnectivityManagementAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/05/2016
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ThingSpaceConnectivityManagementAPI.PCL;
using ThingSpaceConnectivityManagementAPI.PCL.Http.Request;
using ThingSpaceConnectivityManagementAPI.PCL.Http.Response;
using ThingSpaceConnectivityManagementAPI.PCL.Http.Client;
using ThingSpaceConnectivityManagementAPI.PCL.Exceptions;
using ThingSpaceConnectivityManagementAPI.PCL.Models;

namespace ThingSpaceConnectivityManagementAPI.PCL.Controllers
{
    public partial class DevicesController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static DevicesController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static DevicesController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new DevicesController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Changes the identifier of a 3G or 4G device to match hardware changes made for a line of service.
        /// </summary>
        /// <param name="serviceType">Required parameter: Identifier type</param>
        /// <param name="request">Required parameter: Device Usage Query</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public RequestResponse ChangeDeviceIdUsingPUT(string serviceType, ChangeDeviceIdRequest request, string vZM2MToken)
        {
            Task<RequestResponse> t = ChangeDeviceIdUsingPUTAsync(serviceType, request, vZM2MToken);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Changes the identifier of a 3G or 4G device to match hardware changes made for a line of service.
        /// </summary>
        /// <param name="serviceType">Required parameter: Identifier type</param>
        /// <param name="request">Required parameter: Device Usage Query</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public async Task<RequestResponse> ChangeDeviceIdUsingPUTAsync(string serviceType, ChangeDeviceIdRequest request, string vZM2MToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/devices/{serviceType}/actions/deviceId");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "serviceType", serviceType }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<RequestResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Returns the total amount of data sent and the total number of SMS messages sent or received by a set of devices in a specified timeframe.
        /// </summary>
        /// <param name="request">Required parameter: Request</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public RequestResponse CreateAggregateUsingPOST(DeviceAggregateUsageListRequest request, string vZM2MToken)
        {
            Task<RequestResponse> t = CreateAggregateUsingPOSTAsync(request, vZM2MToken);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Returns the total amount of data sent and the total number of SMS messages sent or received by a set of devices in a specified timeframe.
        /// </summary>
        /// <param name="request">Required parameter: Request</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public async Task<RequestResponse> CreateAggregateUsingPOSTAsync(DeviceAggregateUsageListRequest request, string vZM2MToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/devices/usage/actions/list/aggregate");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<RequestResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Returns the network data usage history of a device during a specified time period.
        /// </summary>
        /// <param name="request">Required parameter: Device Usage Query</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the List<DeviceUsageListResponse> response from the API call</return>
        public List<DeviceUsageListResponse> CreateUsageListUsingPOST(DeviceUsageListRequest request, string vZM2MToken)
        {
            Task<List<DeviceUsageListResponse>> t = CreateUsageListUsingPOSTAsync(request, vZM2MToken);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Returns the network data usage history of a device during a specified time period.
        /// </summary>
        /// <param name="request">Required parameter: Device Usage Query</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the List<DeviceUsageListResponse> response from the API call</return>
        public async Task<List<DeviceUsageListResponse>> CreateUsageListUsingPOSTAsync(DeviceUsageListRequest request, string vZM2MToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/devices/usage/actions/list");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<List<DeviceUsageListResponse>>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Requests the current PRL version for devices, which can help determine which devices need a PRL update.
        /// </summary>
        /// <param name="request">Required parameter: Device PRL Query</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public RequestResponse CreatePrlListUsingPOST(DevicePrlListRequest request, string vZM2MToken)
        {
            Task<RequestResponse> t = CreatePrlListUsingPOSTAsync(request, vZM2MToken);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Requests the current PRL version for devices, which can help determine which devices need a PRL update.
        /// </summary>
        /// <param name="request">Required parameter: Device PRL Query</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public async Task<RequestResponse> CreatePrlListUsingPOSTAsync(DevicePrlListRequest request, string vZM2MToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/devices/prl/actions/list");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<RequestResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Returns the provisioning history of a device during a specified time period.
        /// </summary>
        /// <param name="request">Required parameter: Device ProHistory Query</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the List<DeviceProvisioningHistoryListResponse> response from the API call</return>
        public List<DeviceProvisioningHistoryListResponse> CreateProvisioningHistoryListUsingPOST(DeviceProvisioningHistoryListRequest request, string vZM2MToken)
        {
            Task<List<DeviceProvisioningHistoryListResponse>> t = CreateProvisioningHistoryListUsingPOSTAsync(request, vZM2MToken);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Returns the provisioning history of a device during a specified time period.
        /// </summary>
        /// <param name="request">Required parameter: Device ProHistory Query</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the List<DeviceProvisioningHistoryListResponse> response from the API call</return>
        public async Task<List<DeviceProvisioningHistoryListResponse>> CreateProvisioningHistoryListUsingPOSTAsync(DeviceProvisioningHistoryListRequest request, string vZM2MToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/devices/history/actions/list");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<List<DeviceProvisioningHistoryListResponse>>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Changes or removes the costCenterCode value for one or more devices.
        /// </summary>
        /// <param name="request">Required parameter: Request</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public RequestResponse ChangeCostCenterUsingPUT(DeviceCostCenterRequest request, string vZM2MToken)
        {
            Task<RequestResponse> t = ChangeCostCenterUsingPUTAsync(request, vZM2MToken);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Changes or removes the costCenterCode value for one or more devices.
        /// </summary>
        /// <param name="request">Required parameter: Request</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public async Task<RequestResponse> ChangeCostCenterUsingPUTAsync(DeviceCostCenterRequest request, string vZM2MToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/devices/costCenter");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<RequestResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Returns a list of network connection events for a device during a specified time period.
        /// </summary>
        /// <param name="request">Required parameter: Device Connection Query</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the List<ConnectionHistoryResponse> response from the API call</return>
        public List<ConnectionHistoryResponse> CreateConnectionListHistoryUsingPOST(DeviceConnectionListRequest request, string vZM2MToken)
        {
            Task<List<ConnectionHistoryResponse>> t = CreateConnectionListHistoryUsingPOSTAsync(request, vZM2MToken);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Returns a list of network connection events for a device during a specified time period.
        /// </summary>
        /// <param name="request">Required parameter: Device Connection Query</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the List<ConnectionHistoryResponse> response from the API call</return>
        public async Task<List<ConnectionHistoryResponse>> CreateConnectionListHistoryUsingPOSTAsync(DeviceConnectionListRequest request, string vZM2MToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/devices/connections/actions/listHistory");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<List<ConnectionHistoryResponse>>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Returns a list of network connection events for a device during a specified time period.
        /// </summary>
        /// <param name="request">Required parameter: Device Connection Query</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the List<ConnectionEvent> response from the API call</return>
        public List<ConnectionEvent> CreateConnectionListUsingPOST(DeviceConnectionListRequest request, string vZM2MToken)
        {
            Task<List<ConnectionEvent>> t = CreateConnectionListUsingPOSTAsync(request, vZM2MToken);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Returns a list of network connection events for a device during a specified time period.
        /// </summary>
        /// <param name="request">Required parameter: Device Connection Query</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the List<ConnectionEvent> response from the API call</return>
        public async Task<List<ConnectionEvent>> CreateConnectionListUsingPOSTAsync(DeviceConnectionListRequest request, string vZM2MToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/devices/connections/actions/list");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<List<ConnectionEvent>>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Restore service to one or more suspended devices. 
        /// </summary>
        /// <param name="request">Required parameter: Update state</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public RequestResponse CreateRestoreUsingPOST(CarrierActionsRequest request, string vZM2MToken)
        {
            Task<RequestResponse> t = CreateRestoreUsingPOSTAsync(request, vZM2MToken);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Restore service to one or more suspended devices. 
        /// </summary>
        /// <param name="request">Required parameter: Update state</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public async Task<RequestResponse> CreateRestoreUsingPOSTAsync(CarrierActionsRequest request, string vZM2MToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/devices/actions/restore");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<RequestResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Suspends service for one or more devices. 
        /// </summary>
        /// <param name="request">Required parameter: Update state</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public RequestResponse CreateSuspendUsingPOST(CarrierActionsRequest request, string vZM2MToken)
        {
            Task<RequestResponse> t = CreateSuspendUsingPOSTAsync(request, vZM2MToken);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Suspends service for one or more devices. 
        /// </summary>
        /// <param name="request">Required parameter: Update state</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public async Task<RequestResponse> CreateSuspendUsingPOSTAsync(CarrierActionsRequest request, string vZM2MToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/devices/actions/suspend");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<RequestResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Sets a new service plan for one or more devices.
        /// </summary>
        /// <param name="request">Required parameter: Request</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public RequestResponse UpdateServicePlanUsingPUT(ServicePlanUpdateRequest request, string vZM2MToken)
        {
            Task<RequestResponse> t = UpdateServicePlanUsingPUTAsync(request, vZM2MToken);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Sets a new service plan for one or more devices.
        /// </summary>
        /// <param name="request">Required parameter: Request</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public async Task<RequestResponse> UpdateServicePlanUsingPUTAsync(ServicePlanUpdateRequest request, string vZM2MToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/devices/actions/plan");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<RequestResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Returns information about a specified device or a list of devices in an account.
        /// </summary>
        /// <param name="request">Required parameter: Device Query</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the DeviceListResponse response from the API call</return>
        public DeviceListResponse CreateListUsingPOST(DeviceListRequest request, string vZM2MToken)
        {
            Task<DeviceListResponse> t = CreateListUsingPOSTAsync(request, vZM2MToken);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Returns information about a specified device or a list of devices in an account.
        /// </summary>
        /// <param name="request">Required parameter: Device Query</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the DeviceListResponse response from the API call</return>
        public async Task<DeviceListResponse> CreateListUsingPOSTAsync(DeviceListRequest request, string vZM2MToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/devices/actions/list");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<DeviceListResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Deactivates service for one or more devices.
        /// </summary>
        /// <param name="request">Required parameter: Deactivate state</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public RequestResponse CreateDeactiveUsingPOST(CarrierDeactivateRequest request, string vZM2MToken)
        {
            Task<RequestResponse> t = CreateDeactiveUsingPOSTAsync(request, vZM2MToken);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Deactivates service for one or more devices.
        /// </summary>
        /// <param name="request">Required parameter: Deactivate state</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public async Task<RequestResponse> CreateDeactiveUsingPOSTAsync(CarrierDeactivateRequest request, string vZM2MToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/devices/actions/deactivate");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<RequestResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Updates one or more custom field values for devices.
        /// </summary>
        /// <param name="request">Required parameter: Request</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public RequestResponse UpdateCustomFieldsUsingPUT(CustomFieldsUpdateRequest request, string vZM2MToken)
        {
            Task<RequestResponse> t = UpdateCustomFieldsUsingPUTAsync(request, vZM2MToken);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Updates one or more custom field values for devices.
        /// </summary>
        /// <param name="request">Required parameter: Request</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public async Task<RequestResponse> UpdateCustomFieldsUsingPUTAsync(CustomFieldsUpdateRequest request, string vZM2MToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/devices/actions/customFields");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<RequestResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Adds up to 200 new devices, without provisioning lines of service for them.
        /// </summary>
        /// <param name="request">Required parameter: Devices to Add</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the List<AddDevicesResponseMessage> response from the API call</return>
        public List<AddDevicesResponseMessage> AddUsingPOST(AddDevicesRequest request, string vZM2MToken)
        {
            Task<List<AddDevicesResponseMessage>> t = AddUsingPOSTAsync(request, vZM2MToken);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Adds up to 200 new devices, without provisioning lines of service for them.
        /// </summary>
        /// <param name="request">Required parameter: Devices to Add</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the List<AddDevicesResponseMessage> response from the API call</return>
        public async Task<List<AddDevicesResponseMessage>> AddUsingPOSTAsync(AddDevicesRequest request, string vZM2MToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/devices/actions/add");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<List<AddDevicesResponseMessage>>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Activates service for one or more devices.
        /// </summary>
        /// <param name="request">Required parameter: Activate state</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public RequestResponse CreateActiveUsingPOST(CarrierActivateRequest request, string vZM2MToken)
        {
            Task<RequestResponse> t = CreateActiveUsingPOSTAsync(request, vZM2MToken);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Activates service for one or more devices.
        /// </summary>
        /// <param name="request">Required parameter: Activate state</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public async Task<RequestResponse> CreateActiveUsingPOSTAsync(CarrierActivateRequest request, string vZM2MToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/devices/actions/activate");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<RequestResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 