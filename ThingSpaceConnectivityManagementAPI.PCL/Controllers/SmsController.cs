/*
 * ThingSpaceConnectivityManagementAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/05/2016
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ThingSpaceConnectivityManagementAPI.PCL;
using ThingSpaceConnectivityManagementAPI.PCL.Http.Request;
using ThingSpaceConnectivityManagementAPI.PCL.Http.Response;
using ThingSpaceConnectivityManagementAPI.PCL.Http.Client;
using ThingSpaceConnectivityManagementAPI.PCL.Exceptions;
using ThingSpaceConnectivityManagementAPI.PCL.Models;

namespace ThingSpaceConnectivityManagementAPI.PCL.Controllers
{
    public partial class SmsController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static SmsController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static SmsController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new SmsController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Starts delivery of queued SMS messages for the specific account.
        /// </summary>
        /// <param name="aname">Required parameter: Account name</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RestSuccessResponse response from the API call</return>
        public RestSuccessResponse UpdateStartSmsCallbackUsingPUT(string aname, string vZM2MToken)
        {
            Task<RestSuccessResponse> t = UpdateStartSmsCallbackUsingPUTAsync(aname, vZM2MToken);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Starts delivery of queued SMS messages for the specific account.
        /// </summary>
        /// <param name="aname">Required parameter: Account name</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RestSuccessResponse response from the API call</return>
        public async Task<RestSuccessResponse> UpdateStartSmsCallbackUsingPUTAsync(string aname, string vZM2MToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/sms/{aname}/startCallbacks");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "aname", aname }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Put(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<RestSuccessResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Retrieves queued SMS messages sent by all M2M MC devices associated with an account.
        /// </summary>
        /// <param name="aname">Required parameter: Account name</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <param name="next">Optional parameter: Continue the previous query from the URL in Location Header</param>
        /// <return>Returns the SmsMessagesResponse response from the API call</return>
        public SmsMessagesResponse GetSmsMessagesUsingGET(string aname, string vZM2MToken, long? next = null)
        {
            Task<SmsMessagesResponse> t = GetSmsMessagesUsingGETAsync(aname, vZM2MToken, next);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Retrieves queued SMS messages sent by all M2M MC devices associated with an account.
        /// </summary>
        /// <param name="aname">Required parameter: Account name</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <param name="next">Optional parameter: Continue the previous query from the URL in Location Header</param>
        /// <return>Returns the SmsMessagesResponse response from the API call</return>
        public async Task<SmsMessagesResponse> GetSmsMessagesUsingGETAsync(string aname, string vZM2MToken, long? next = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/sms/{aname}/history");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "aname", aname }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "next", next }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<SmsMessagesResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Sends an SMS message to one or more devices.
        /// </summary>
        /// <param name="request">Required parameter: SMS Request</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public RequestResponse CreateSendSmsMessageUsingPOST(SMSSendRequest request, string vZM2MToken)
        {
            Task<RequestResponse> t = CreateSendSmsMessageUsingPOSTAsync(request, vZM2MToken);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Sends an SMS message to one or more devices.
        /// </summary>
        /// <param name="request">Required parameter: SMS Request</param>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <return>Returns the RequestResponse response from the API call</return>
        public async Task<RequestResponse> CreateSendSmsMessageUsingPOSTAsync(SMSSendRequest request, string vZM2MToken)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/sms");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(request);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<RequestResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 