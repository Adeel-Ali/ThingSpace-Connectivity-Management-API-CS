/*
 * ThingSpaceConnectivityManagementAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/05/2016
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ThingSpaceConnectivityManagementAPI.PCL;
using ThingSpaceConnectivityManagementAPI.PCL.Http.Request;
using ThingSpaceConnectivityManagementAPI.PCL.Http.Response;
using ThingSpaceConnectivityManagementAPI.PCL.Http.Client;
using ThingSpaceConnectivityManagementAPI.PCL.Exceptions;
using ThingSpaceConnectivityManagementAPI.PCL.Models;

namespace ThingSpaceConnectivityManagementAPI.PCL.Controllers
{
    public partial class PlansController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static PlansController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static PlansController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new PlansController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Returns a list of all data service plans that are associated with a specified account.
        /// </summary>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <param name="aname">Required parameter: Account name</param>
        /// <return>Returns the List<ServicePlanResponse> response from the API call</return>
        public List<ServicePlanResponse> GetServicePlanListUsingGET(string vZM2MToken, string aname)
        {
            Task<List<ServicePlanResponse>> t = GetServicePlanListUsingGETAsync(vZM2MToken, aname);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Returns a list of all data service plans that are associated with a specified account.
        /// </summary>
        /// <param name="vZM2MToken">Required parameter: M2M-MC Session Token</param>
        /// <param name="aname">Required parameter: Account name</param>
        /// <return>Returns the List<ServicePlanResponse> response from the API call</return>
        public async Task<List<ServicePlanResponse>> GetServicePlanListUsingGETAsync(string vZM2MToken, string aname)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/plans/{aname}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "aname", aname }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "VZ-M2M-Token", vZM2MToken }
            };
            _headers.Add("api_key", Configuration.ApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new RestErrorResponseException(@"Error Response", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<List<ServicePlanResponse>>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 